/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: traceboy.proto */

#ifndef PROTOBUF_C_traceboy_2eproto__INCLUDED
#define PROTOBUF_C_traceboy_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct TracePacket TracePacket;
typedef struct Empty Empty;


/* --- enums --- */


/* --- messages --- */

struct  TracePacket
{
  ProtobufCMessage base;
  uint32_t game_rom_crc32;
  ProtobufCBinaryData start_state;
  ProtobufCBinaryData user_inputs;
  uint32_t end_state_crc32;
};
#define TRACE_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&trace_packet__descriptor) \
, 0, {0,NULL}, {0,NULL}, 0 }


struct  Empty
{
  ProtobufCMessage base;
};
#define EMPTY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&empty__descriptor) \
 }


/* TracePacket methods */
void   trace_packet__init
                     (TracePacket         *message);
size_t trace_packet__get_packed_size
                     (const TracePacket   *message);
size_t trace_packet__pack
                     (const TracePacket   *message,
                      uint8_t             *out);
size_t trace_packet__pack_to_buffer
                     (const TracePacket   *message,
                      ProtobufCBuffer     *buffer);
TracePacket *
       trace_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   trace_packet__free_unpacked
                     (TracePacket *message,
                      ProtobufCAllocator *allocator);
/* Empty methods */
void   empty__init
                     (Empty         *message);
size_t empty__get_packed_size
                     (const Empty   *message);
size_t empty__pack
                     (const Empty   *message,
                      uint8_t             *out);
size_t empty__pack_to_buffer
                     (const Empty   *message,
                      ProtobufCBuffer     *buffer);
Empty *
       empty__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   empty__free_unpacked
                     (Empty *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TracePacket_Closure)
                 (const TracePacket *message,
                  void *closure_data);
typedef void (*Empty_Closure)
                 (const Empty *message,
                  void *closure_data);

/* --- services --- */

typedef struct TraceDB_Service TraceDB_Service;
struct TraceDB_Service
{
  ProtobufCService base;
  void (*submit)(TraceDB_Service *service,
                 const TracePacket *input,
                 Empty_Closure closure,
                 void *closure_data);
};
typedef void (*TraceDB_ServiceDestroy)(TraceDB_Service *);
void trace_db__init (TraceDB_Service *service,
                     TraceDB_ServiceDestroy destroy);
#define TRACE_DB__BASE_INIT \
    { &trace_db__descriptor, protobuf_c_service_invoke_internal, NULL }
#define TRACE_DB__INIT(function_prefix__) \
    { TRACE_DB__BASE_INIT,\
      function_prefix__ ## submit  }
void trace_db__submit(ProtobufCService *service,
                      const TracePacket *input,
                      Empty_Closure closure,
                      void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor trace_packet__descriptor;
extern const ProtobufCMessageDescriptor empty__descriptor;
extern const ProtobufCServiceDescriptor trace_db__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_traceboy_2eproto__INCLUDED */
